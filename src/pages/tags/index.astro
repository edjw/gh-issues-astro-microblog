---
import { showTags } from "@/consts";

if (!showTags) {
  return Astro.redirect("/");
}

import BaseLayout from "@/layouts/BaseLayout.astro";

import { fetchAllGithubIssues } from "@/data/fetchAllGithubIssues";
import type { GithubIssueWithSlug } from "@/types/githubIssueTypes";

const allPosts: GithubIssueWithSlug[] = await fetchAllGithubIssues();

export type Label = {
  id?: number | undefined;
  node_id?: string | undefined;
  url?: string | undefined;
  name?: string | undefined;
  description?: string | null | undefined;
  color?: string | null | undefined;
  default?: boolean | undefined;
};

// get a list of all unique label names sorted alphabetically and make sure label is not a string
const allLabels = allPosts
  .map((post) => post.labels)
  .flat()
  .reduce((acc: Label[], label) => {
    if (typeof label !== "string" && !acc.find((l) => l.name === label.name)) {
      acc.push(label);
    }
    return acc;
  }, [])
  .sort((a, b) => {
    if (a.name !== undefined && b.name !== undefined) {
      return a.name.localeCompare(b.name);
    } else {
      return 0;
    }
  });
---

<BaseLayout
  title="All tags"
  description="A list of all the tags used on this site."
>
  <h2>Tags</h2>
  <p>A list of all the tags used on this site</p>
  {
    allLabels.length > 0 ? (
      <ul class="flex flex-col gap-y-4 list-none pl-0">
        {allLabels.map((label) => (
          <li>
            <a
              href={`/tags/${label.name}`}
              class="font-normal no-underline hover:underline before:content-['#']"
            >
              {label.name}
            </a>
          </li>
        ))}
      </ul>
    ) : (
      <p class="text-center text-gray-500">No posts with tags</p>
    )
  }
</BaseLayout>
