<script is:inline>
document.addEventListener("astro:load", () => {
  // This only runs once.
  const allPostsPublishDateTimes = Array.from(
    document.querySelectorAll("time[data-datetime]")
  );

  const now = new Date().getTime();
  const relative = new Intl.RelativeTimeFormat("en-GB", {
    style: "long",
    numeric: "auto",
  });

  allPostsPublishDateTimes.forEach((postPublishDateTime) => {
    const datetimeString = postPublishDateTime.dataset.datetime;

    const relativeDate = getRelativeDate(datetimeString, now, relative);
    postPublishDateTime.textContent = relativeDate;
    postPublishDateTime.classList.remove("hidden");
  });

  function getRelativeDate(dateString, now, relative) {
    const date = new Date(dateString);
    const diff = now - date.getTime();
    const diffInMinutes = diff / 1000 / 60;
    const diffInHours = diffInMinutes / 60;
    const diffInDays = diffInHours / 24;
    const diffInWeeks = diffInDays / 7;
    const diffInMonths = diffInDays / 30;
    const diffInYears = diffInDays / 365;

    if (diffInMinutes < 1) {
      return "just now";
    } else if (diffInMinutes < 60) {
      return `${relative.format(Math.round(-diffInMinutes), "minute")}`;
    } else if (diffInHours < 24) {
      return `${relative.format(Math.round(-diffInHours), "hour")}`;
    } else if (diffInDays < 7) {
      return `${relative.format(Math.round(-diffInDays), "day")}`;
    } else if (diffInWeeks < 4) {
      return `${relative.format(Math.round(-diffInWeeks), "week")}`;
    } else if (diffInMonths < 12) {
      return `${relative.format(Math.round(-diffInMonths), "month")}`;
    } else {
      return `${relative.format(Math.round(-diffInYears), "year")}`;
    }
  }
  {
    once: true;
  }
});
</script>
